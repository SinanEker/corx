<?php
/*
 * @name Corx.min.php
 * @copyright:
 * * Copyright (c) 2013, Sinan Eker, Selsyourself, inc.
 * * All rights reserved.
 * * --------------------------------------------------------------------------------
 * * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"    +
 * * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE      +
 * * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE +
 * * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE    +
 * * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL     +
 * * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR     +
 * * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER     +
 * * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  +
 * * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  +
 * * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.           +
 * * --------------------------------------------------------------------------------
 * */
namespace Corx;interface CorxInterface {function load($f,array $n,$e);function loadRequiredFiles(array $t);function loadDatatypes();function setFiles(array $f);function setDatatypeFiles(array $d);}define("N",null);define("CORX_PHP_VERSION",phpversion());trait CorxTrait {private function load($f,array $n,$e){if(!is_string($f)){throw new \InvalidArgumentException("$folder must be a string.");}if(!is_string($e)){throw new \InvalidArgumentException("$extension must be a string.");}$i=0; while($i<count($n)) {if($f=="datatypes"){require_once $f."/".$n[$i].$e;} else {require_once $f.$n[$i].$e;}++$i;}}private function loadRequiredFiles(array $t){foreach($t as $k=>$v){self::load($this->files[$t[$k]]["folder"],$this->files[$t[$k]]["names"],$this->files[$t[$k]]["extension"]);}}private function loadDatatypes(){self::load($this->datatype_files["folder"],$this->datatype_files["names"],$this->datatype_files["extension"]);}private function setFiles(array $f){$this->files=$f;}protected function setDatatypeFiles(array $d){$this->datatype_files=$d;}}trait CorxConstructTrait{private function __construct($f=N,$d=N){if(is_array($f)){self::setFiles($f);}if(is_array($d)){self::setDatatypeFiles($d);}}}trait CorxBaseCallbackTrait{private function __callback(callable $f,$p=N,$d=N){if(is_array($d)){if($p!==N){call_user_func_array($f,[$p,$d]);}else{call_user_func_array($f,[$d]);}}else if($d!==N){if($p!==N){$f($p,$d);}else{$f();}}else{if($p!==N){$f($p);}else{$f();}}}private function callback($t=N,callable $f,$d=N){if($t===N){throw new \InvalidArgumentException("$thiz can\"t be null!");}if(!is_object($t)){throw new \InvalidArgumentException("$thiz must be a object!");}self::__callback($f,$t,$d);}}trait CorxConstructTraitFn{private function __construct($f=N,$d=N){if($f!==N){self::callback($this,$f,$d);}}}namespace Corx\CorxLoader;use\Corx\CorxConstruct;use\Corx\CorxInterface;use\Corx\CorxTrait;use\Corx\CorxConstructTrait;use\Corx\CorxBaseCallbackTrait;use\Corx\CorxConstructTraitFn;class Corx implements CorxInterface {use CorxTrait,CorxBaseCallbackTrait,CorxConstructTraitFn{callback as public;__construct as public; loadRequiredFiles as public; loadDatatypes as public;}}class CorxAutoLoad extends Corx{protected $files=["namespace"=>["names"=>["Helpers","Model","View","Datatype","Headers","Request","Gzip","Plugins"],"folder"=>"namespaces/","extension"=>".namespace.php"],"interface"=>["names"=>["Helpers","Model","View","Datatype","Headers","Request","Gzip"],"folder"=>"interfaces/","extension"=>".interface.php"],"trait"=>["names"=>["Helpers","Model","View","Datatype","Headers","Request","Gzip"],"folder"=>"traits/","extension"=>".trait.php"],"class"=>["names"=>["Helpers","Model","View","Datatype","Headers","Request","Gzip"],"folder"=>"classes/","extension"=>".class.php"]];protected $datatype_files=["names"=>["Bool","Float","Int","String"],"folder"=>"datatypes","extension"=>".type.php"];}class CorxSetAndLoad{use CorxTrait,CorxConstructTrait{__construct as public;loadRequiredFiles as public;loadDatatypes as public;}}namespace Corx\CorxTest;use\Corx\CorxBaseCallbackTrait;class CorxTest{use CorxBaseCallbackTrait {__callback as public;}public static function test(callable $c,$d=N){if(!version_compare(CORX_PHP_VERSION,"5.4.0",">=")){throw new \RuntimeException("You run a incompatible PHP version on you os. Current version: ".CORX_PHP_VERSION);}(new CorxTest())->__callback($c,N,$d);}}